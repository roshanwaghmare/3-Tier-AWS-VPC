Terraform installation

--------------------------------------------------------------------------------------------------------------------
********************************************************************************************************************

Terraform link : https://developer.hashicorp.com/terraform/downloads?product_intent=terraform

go to Linux -> Amazon Linux -> 

sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

terraform --version 

install AWS CLI 

curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
unzip awscliv2.zip
sudo ./aws/install

aws --version

go to aws consule > IAM > craete user > admin access> Security credentials > create Access Key & Secrect Access key id

Now go back to Terminal 

aws configure to configure aws user or account i have provided admin acess 

AWS Access Key ID [None]:--
AWS Secret Access Key [None]: --
Default region name [None]: us-east-1

aws sts get-caller-identity  to view aws user details

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



*********************************************************************************************************************
Terraform Session 16-19
**********************************************************************************************************************
lunch terrafrom EC2 instance 
sudo su -
hostname terraform
sudo su -
create main.tf file
resource "aws_s3_bucket"                        "example" {
  bucket = "my-tf-test-bucket"

  tags = {
    Name        =                                   "My bucket"
    Environment = "Dev"
  }
}
terraform validate even the file is not proprly aligned it will not give an syntex error it will only check the syntex  
terraform fmt  cmd will align the format 
terrafrom plan  will show the plan 

terraform plan -out sample.txt it will save the plan in the sample.txt file next time when you apply you it wont show u plan directly excute and create stuff

terraform apply 
bucket name must be unique
if u run terraform apply again it will it not create anything it will match the your real infrastucture with terraform current state and give an output

terraform.tfstate file is most important aspect of terraform beacuse it contain all the infrature details
this help us to trace back what changes happened privously and keep track of everything

(+) added
(-) destroyed
(~) changed

terraform apply --auto-approve to auto approve without yes or no permission

this kind of environment is useful for stock market like we can run server whenever we require like 9am to 3pm etc.
Terraform backend 
if loacal file is crashed it will then all the file will crash 

*** WAYS TO STORE TFSTATE FILE ***

*******
LOCAL

The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally.  

*******
REMOTE

The remote backend is unique among all other Terraform backends because it can both store state snapshots and execute operations for Terraform Cloud's CLI-driven run workflow. It used to be called an "enhanced" backend.

*******
AWS S3

Stores the state as a given key in a given bucket on Amazon S3. This backend also supports state locking and consistency checking via Dynamo DB, which can be enabled by setting the dynamodb_table field to an existing DynamoDB table name. A single DynamoDB table can be used to lock multiple remote state files. Terraform generates key names that include the values of the bucket and key variables.

and S3 we have Bucket Versioning that will version our state file if u run code 5 time it will crete 5 files it will easy to trace
****


*********************************************************************************************************************
Terraform Session 17-20
*********************************************************************************************************************

Terraform file Lock

first we have to create dynamoDB table

DynamoDB Table to use for state locking and consistency. The table must have a partition key named LockID with type of String. If not configured, state locking will be disabled.

go to > dynamo DB > create table > Partition key > LockID

go to S3 > create bucket > ACL Enabled > Bucket Versioning ENabled 

we dont use deafualt VPC they reason is behind that we dont have control over it it allow all traffic inbound as well outbound also deafult route tables 

create VPC
Terraform VPC we have created

will create two tf files 
provider .tf
vpc.tf

**************
resource "aws_vpc" "main" {
  cidr_block       = "10.0.0.0/24"
  instance_tenancy = "default"

  tags = {
    Name = "main-terraform"
    Environment = "Dev"        chnaged section
  }
}

terraform {
  backend "s3" {
    bucket = "terraform-main-statefile-bucket"   S3bucket name
    key    = "terraform.tfstate"                 key meaning folder name inside that tfstate wfile will store
    region = "us-east-1"                         region
    dynamodb_table = "terraform-main"            copy dynamodb table name paste here 
  }
}

------changed section
output "aws_vpc_output" {                   out put name 
   value = "${aws_vpc.main.cidr_block}"     --output value 
}

*************
provider.tf 

provider "aws" {
  region = "us-east-1"
}
*********************

terraform init
terraform apply --auto-approve

u will see that tfstate file will stored on s3 bucket 


ls -la

if u add changed section to vpc.tf file and save that file if go to s3 it will create version of that file
go to s3 bucket > Show version 

mv vpc.tf vc.tf              even if you change the file name it won't effect to you infrasture so name can be anything
mv provider.tf pd.tf 


************************************************************************************************************************


------------------------------------------------------------------------------------------------------------------------
Terraform Session 18-21 Dynamic Value sting interpolation
------------------------------------------------------------------------------------------------------------------------

in our provious session we have hard codded all the values in the file howver this is not the best practice if we need some chnages or if multiple teams are working on the same project so we learn how to use dynamic code

if we want to print value of you key 

var1=5
each var1  ----only key is prinint not value to do so 

******
we use STING INTERPOLATION  ${--} 
******
each ${var1}
5  this will show value major coding language use sting interpolation java python etc

will excut this concept in our work
----------------------
variable.tf
-----------
variable "cidr_range" {
   type = string
   default = "10.0.0.0/24"      ----- we provided ip value here
   description = "variable to store ip range"
}
----------------------------------------------------
vap.tf 
----------------------------------------------------
resource "aws_vpc" "main" {
  cidr_block       = "${var.cidr_range}"  ---- we have removed 10.0.00/24 and used string interpolation "${var.variablename}" 
  instance_tenancy = "default"

  tags = {
    Name = "main-terraform"
    Environment = "Dev"
  }
}

terraform {
  backend "s3" {
    bucket = "terraform-main-statefile-bucket"
    key    = "terraform.tfstate"
    region = "us-east-1"
    dynamodb_table = "terraform-main"
  }
}

output "aws_vpc_output" {
    value = "${aws_vpc.main.cidr_block}"
}
----------------------------------------------------

now we dont provide default value in varaible file
variable "cidr_range" {
   type = string
   description = "variable to store ip range"
}

--------------------------------------------
terraform plan 
it will ask you for which value means Ip whould you like to execute
enter value : 10.0.0.0/24

another way is this

terraform plan -var "cidr_range=10.10.0.0/24"

work however if we have many variable this is not good way so we craete tfvars file to store all the values
create 
dev.tfvars   file 
cider_range = "10.10.0.0/24"    inside file

terraform plan -var-file=dev.tfvars


------------------------
*** Terrform Workspace ***
------------------------
if we have team they will be diffrent enviorment people work like Dev, prod, or any team name etc and each environment have diffrent workspace to test, code , deploy

to view terrform Workspace 

terraform workspace list           ---list all the workspace 
terraform workspace --help         ---show how to use workspace
terraform workspace new dev          ---to create new workspace
terraform workspace new prod         ---to create new workspace
terraform workspace list   
  default                       -- (*) represent current workspace
  dev
* prod

there will be two object created inside S3 bucket we have craeted eariler
 
Amazon S3 > Buckets > terraform-main-statefile-bucket > env:/ prod/ & dev/

each workspace have its own terrafrom.tfstate file


terraform workspace select dev    -----to select workspace

+++++++
dev -  this will be on dev environment 
terraform apply -var-file=dev.tfvars --auto-approve


terraform workspace select prod
++++++
terraform apply --auto-approve

enter value : 10.0.0.0/26

----------------------------------------------------------------

but this is hard to know that which workspace we are working 

so will chnage the code itself will tell us which workspace we are in

resource "aws_vpc" "main" {
  cidr_block       = "${var.cidr_range}"
  instance_tenancy = "default"

  tags = {
    Name = "main-terraform"
    Environment = "${terraform.workspace}"   will change the value with sting interpolation
  }
}

terraform {
  backend "s3" {
    bucket = "terraform-main-statefile-bucket"
    key    = "terraform.tfstate"
    region = "us-east-1"
    dynamodb_table = "terraform-main"
  }
}

output "aws_vpc_output" {
    value = "${aws_vpc.main.cidr_block}"
}

terraform destroy --auto-approve

10.0.0.0/26

terraform workspace select dev

terraform destroy --auto-approve

10.10.0.0/24

**************************************************************************************************************************************
------------------------------------------------------------------------------------------------------------------------
Terraform Session 19-22 Dynamic Value sting interpolation
------------------------------------------------------------------------------------------------------------------------

any workspace you that workspace will only create in the current code in vpc.tf with defined s3 bucket for state file

we have try to use more dynamic values 

we have added count 
count = 5 in        ----- vpc.tf file and removed output "aws_vpc_output"
five vpc will created with same name and same ip range 
this is not effective way

terraform plan

**will us condistional execution**

terraform workspace list
select dev

resource "aws_vpc" "main" {
  count            = "${terraform.workspace == "dev" ? 0 : 1}"  ---if my workspace is dev then execute 0 rest crate 1 
  cidr_block       = "${var.cidr_range}"
  instance_tenancy = "default"

terraform destroy --auto-approve 
nothing will be creted 

now will switch the workspace 

terraform workspace select prod
terraform apply --auto-approve 
 it will validate and only keep 1 vpc if you have multiple as per the code

now we want name also to be dynamic so will use new resourse block

************///////

Locals        resourse block

***********///////

locals {
   vpc_name  = "${terraform.workspace == "dev" ? "demo-vpc-dev" : "demo-vpc-prod"}"  ---if my workspace is dev then name will be demo-vpc-dev or rest demo-vpc-prod

resource "aws_vpc" "main" {
  count            = "${terraform.workspace == "dev" ? 0 : 1}"
  cidr_block       = "${var.cidr_range}"
  instance_tenancy = "default"

  tags = {
    Name = "${local.vpc_name}"                                         ----we edit the name tag add loacl.vpc_name
    Environment = "${terraform.workspace}"
  }
}

because we have mensionted in the code if dev create o hence we are switching workspace

terraform workspace select prod

terraform apply --auto-approve 

1 vpc created with name demo-vpc-prod in prod environment

***********************************************************************************************************************************************


------------------------------------------------------------------------------------------------------------------------
Terraform Session 20-23 Dynamic Value 
------------------------------------------------------------------------------------------------------------------------
































